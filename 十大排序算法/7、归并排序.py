'''
5、归并排序
归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。
作为一种典型的分而治之思想的算法应用，归并排序的实现有两种方法：
自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；
自下而上的迭代；
和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。
（1）算法步骤
申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；
设定两个指针，最初位置分别为两个已经排序序列的起始位置；
比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；
重复步骤 3 直到某一指针达到序列尾；
将另一序列剩下的所有元素直接复制到合并序列尾。
'''

def merge_sort(data):  # 分治发的典型应用，大问题拆分成小问题，逐个击破，之后将结果合并
    half_index = int(len(data) / 2)  # 将数组拆分

    d0 = data[:half_index]
    d1 = data[half_index:]

    if len(d0) > 1:
        d0 = merge_sort(d0)

    if len(d1) > 1:
        d1 = merge_sort(d1)

    for i in range(len(d1)):
        state = 1
        for j in range(len(d0)):
            if d1[i] < d0[j]:
                state = 0
                d0.insert(j, d1[i])
                break
        if state == 1:  # 如果大于d0这个队列的所有值，那么直接extend所有数据
            d0.extend(d1[i:])
            break

    return d0

arr = [2,1,32,41,42,33,4545,0,343,434,34232,44,3434,43,543,48,5]
print(merge_sort(arr))
