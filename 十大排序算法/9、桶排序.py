'''
9、桶排序
桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：
在额外空间充足的情况下，尽量增大桶的数量
使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中
同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。
什么时候最快
当输入的数据可以均匀的分配到每一个桶中。
什么时候最慢
当输入的数据被分配到了同一个桶中。
'''

def bucket_sort(s):
    """桶排序"""
    mi = min(s)
    ma = max(s)
    # 桶的大小
    bu = (ma-mi) / len(s)
    # 桶数组
    co = [[] for _ in range(len(s)+1)]
    # 向桶数组填数
    for i in s:
        co[int((i - mi) // bu)].append(i)

    # 回填，这里桶内部排序直接调用了sorted
    ss = []
    for i in range(len(co)):
        for j in sorted(co[i]):
            ss.append(j)

    return ss


a = [3,2,6,822,34,2,6,7,3]
b = [1,4,3,5,2,6,43,45,323,23,13,2,4,223,34]
print(bucket_sort(b))
